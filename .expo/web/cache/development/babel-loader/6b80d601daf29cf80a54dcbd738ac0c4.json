{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\jetspeed\\\\App.js\";\nimport 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AuthRoute from \"./route/AuthRoute\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nrequire('dotenv').config();\n\nvar client = new ApolloClient({\n  uri: 'localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  React.useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 2000);\n  }, []);\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, React.createElement(StatusBar, {\n      style: \"light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }), React.createElement(Image, {\n      style: styles.tinyLogo,\n      source: require(\"./jetspeed-logo.png\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }), React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, React.createElement(NavigationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, React.createElement(AuthRoute, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    })));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#000',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tinyLogo: {\n    width: 100,\n    height: 100,\n    bottom: 30\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["c:/xampp/htdocs/jetspeed/App.js"],"names":["StatusBar","React","NavigationContainer","AuthRoute","ApolloClient","InMemoryCache","ApolloProvider","require","config","client","uri","cache","App","useState","isLoading","setIsLoading","useEffect","setTimeout","styles","container","tinyLogo","StyleSheet","create","backgroundColor","flex","alignItems","justifyContent","width","height","bottom","background","position","left","right","top"],"mappings":";;AAAA,OAAO,8BAAP;AACA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AAGA,OAAOC,SAAP;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,IAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,wBADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAe,SAASO,GAAT,GAAe;AAC5B,wBAAkCX,KAAK,CAACY,QAAN,CAAe,IAAf,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAEAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAM;AACpBC,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJD,EAIG,EAJH;;AAMA,MAAID,SAAJ,EAAe;AACb,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEI,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAED,MAAM,CAACE,QADhB;AAEE,MAAA,MAAM,EAAEb,OAAO,uBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAME,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD,GAXD,MAWO;AACL,WACE,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;AACF;AAED,IAAMS,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,eAAe,EAAE,MADR;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BN,EAAAA,QAAQ,EAAE;AACRO,IAAAA,KAAK,EAAE,GADC;AAERC,IAAAA,MAAM,EAAE,GAFA;AAGRC,IAAAA,MAAM,EAAE;AAHA,GAPqB;AAY/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAE,UADA;AAEVC,IAAAA,IAAI,EAAE,CAFI;AAGVC,IAAAA,KAAK,EAAE,CAHG;AAIVC,IAAAA,GAAG,EAAE,CAJK;AAKVN,IAAAA,MAAM,EAAE;AALE;AAZmB,CAAlB,CAAf","sourcesContent":["import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, Image, ActivityIndicator } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n// import { LinearGradient } from 'expo-linear-gradient';\n// import Login from './auth/SignIn';\nimport AuthRoute from './route/AuthRoute';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nrequire('dotenv').config()\n\nconst client = new ApolloClient({\n  uri: 'localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  }, [])\n\n  if (isLoading) {\n    return (\n      <View style={styles.container}>\n        <StatusBar style=\"light\" />\n        <Image\n          style={styles.tinyLogo}\n          source={require('./jetspeed-logo.png')}\n        />\n        <ActivityIndicator size=\"large\" color=\"red\" />\n      </View>\n    )\n  } else {\n    return (\n      <ApolloProvider client={client}>\n        <NavigationContainer>\n          <AuthRoute />\n        </NavigationContainer>\n      </ApolloProvider>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#000',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  tinyLogo: {\n    width: 100,\n    height: 100,\n    bottom: 30\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: '100%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}