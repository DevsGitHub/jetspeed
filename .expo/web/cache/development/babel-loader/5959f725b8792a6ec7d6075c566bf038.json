{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"c:\\\\xampp\\\\htdocs\\\\jetspeed\\\\App.js\";\nimport 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AuthRoute from \"./route/AuthRoute\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, from, HttpLink } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\n\nrequire('dotenv').config();\n\nvar errorLink = onError(function (_ref) {\n  var graphqlError = _ref.graphqlError,\n      networkError = _ref.networkError;\n\n  if (graphqlError) {\n    graphqlError.map(function (_ref2) {\n      var message = _ref2.message,\n          location = _ref2.location,\n          path = _ref2.path;\n      alert(\"Graphql error \" + message);\n    });\n  }\n});\nvar link = from([errorLink, new HttpLink({\n  uri: 'http://localhost:5000/graphql'\n})]);\nvar client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  React.useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 2000);\n  }, []);\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, React.createElement(StatusBar, {\n      style: \"light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), React.createElement(Image, {\n      style: styles.tinyLogo,\n      source: require(\"./jetspeed-logo.png\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }), React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, React.createElement(NavigationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, React.createElement(AuthRoute, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    })));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#000',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  tinyLogo: {\n    width: 100,\n    height: 100,\n    bottom: 30\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["c:/xampp/htdocs/jetspeed/App.js"],"names":["StatusBar","React","NavigationContainer","AuthRoute","ApolloClient","InMemoryCache","ApolloProvider","from","HttpLink","onError","require","config","errorLink","graphqlError","networkError","map","message","location","path","alert","link","uri","client","cache","App","useState","isLoading","setIsLoading","useEffect","setTimeout","styles","container","tinyLogo","StyleSheet","create","backgroundColor","flex","alignItems","justifyContent","width","height","bottom","background","position","left","right","top"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View, Image, ActivityIndicator } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n// import { LinearGradient } from 'expo-linear-gradient';\n// import Login from './auth/SignIn';\nimport AuthRoute from './route/AuthRoute';\nimport { ApolloClient, InMemoryCache, ApolloProvider, from, HttpLink } from '@apollo/client';\nimport {onError} from '@apollo/client/link/error';\nrequire('dotenv').config()\n\nconst errorLink = onError(({graphqlError, networkError})=>{\n  if(graphqlError){\n      graphqlError.map(({message, location, path})=>{\n        alert(`Graphql error ${message}`)\n      })\n  }\n})\n\nconst link = from([\n  errorLink,\n  new HttpLink({uri: 'http://localhost:5000/graphql'}),\n])\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  }, [])\n\n  if (isLoading) {\n    return (\n      <View style={styles.container}>\n        <StatusBar style=\"light\" />\n        <Image\n          style={styles.tinyLogo}\n          source={require('./jetspeed-logo.png')}\n        />\n        <ActivityIndicator size=\"large\" color=\"red\" />\n      </View>\n    )\n  } else {\n    return (\n      <ApolloProvider client={client}>\n        <NavigationContainer>\n          <AuthRoute />\n        </NavigationContainer>\n      </ApolloProvider>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#000',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  tinyLogo: {\n    width: 100,\n    height: 100,\n    bottom: 30\n  },\n  background: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    height: '100%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}